<?php

namespace Taras\Comments\Components;

//use Backend\Controllers\Auth;
use Cms\Classes\ComponentBase;
use Taras\Comments\Models\Settings;
use Validator;
use Auth;
use Taras\Comments\Models\Comments as CommentsModel;

class Comments extends ComponentBase
{
    public $post_id;
    public $tag;
    public $posts;
    public $count;

    public function componentDetails()
    {
        return [
            'name' => 'Comments',
            'description' => 'Displays a list of comments on the page.'
        ];
    }

    public function defineProperties()
    {
        return [

            'name1' => [
                'title' => 'url Page',
                'description' => 'description Url',
                'default' => '{{ :slug }}',
                'type' => 'string'
            ],

            'tag' => [
                'title' => 'Tag',
                'description' => 'Tag description',
                'type' => 'string',
                'default' => ''
            ],
        ];
    }

    public function settings()
    {
        return [
            'allow_guest' => Settings::get('allow_guest', false),
            'recaptcha_enabled' => Settings::get('recaptcha_enabled', false),
            'site_key' => Settings::get('site_key', false)

        ];

    }

    public function onRun()
    {
        parent::onRun(); // TODO: Change the autogenerated stub
        $this->prepareVars();
        $this->addCss('/plugins/taras/comments/assets/css/comments.css');
        $this->addJs('/plugins/taras/comments/assets/js/comments.js');
        if(Settings::get('recaptcha_enabled')){
            $this->addJs('https://www.google.com/recaptcha/api.js');
        }
        $this->posts = $this->page['posts'] = $this->listPosts();

    }

    public function onSaveCommentButton()
    {

        $formValidation = [
            'author' => 'alpha|min:2|max:25',
            'email' => 'email',
            'content' => 'required|min:2|max:500'
        ];

        if (!Auth::check()) {
            $formValidation['email'] = 'required|email';
            $formValidation['author'] = 'required|alpha|min:2|max:25';
        }

        $validator = Validator::make(post(), $formValidation);


        // check Validator
        if ($validator->fails()) {
            return [
                'message' => $validator->messages()
            ];
        }

        // check ReCaptcha
        if(Settings::get('recaptcha_enabled')){
            $check = $this->checkCaptcha();
            if($check['success'] != true){
                return ['message' => ['captcha' => ['Captcha is not valid']]];
            }        
        }

        return $this->saveComment();

    }

    public function saveComment()
    {
        $model = new CommentsModel();
        $model->content = strip_tags(post('content'));
//        $model->tag = post('tag');
        $model->post_id = post('post_id');
        $model->parent_id = post('parent_id');


        if (Settings::get('allow_guest')) {
            $model->author = post('author');
            $model->email = post('email');
        } else {
            $model->author = null;
            $model->email = null;
        }

        if(Auth::check()){
            $model->user_id = Auth::getUser()->id;
        }
        $model->status = Settings::get('status', 2);
        if($model->save()){
            return ['content' => $this->renderPartial('@list.htm', ['posts' => [$model]])] ;
        }
    }

    protected function prepareVars()
    {
        $this->post_id = $this->param('id');
        $this->tag = $this->property('tag');
    }

    protected function listPosts()
    {
        $comments = CommentsModel::all();
        $this->count = count($comments);
        return $this->buildTree($comments);
    }


    /**
     * @param $elements
     * @param int $parentId
     * @return array
     */
    public function buildTree($elements, $parentId = 0)
    {
        $branch = [];

        foreach ($elements as $element) {
            if ($element->parent_id == $parentId) {
                $children = $this->buildTree($elements, $element->id);
                if ($children) {
                    $element['children'] = $children;
                }
                $branch[$element->id] = $element;
//                unset($elements[$element->id]);
            }
        }
        return $branch;
    }

    public function checkCaptcha(){
        $url = 'https://www.google.com/recaptcha/api/siteverify';
        $secret = Settings::get('secret_key');
        $response = post('g-recaptcha-response');
        $remoteip = $_SERVER['REMOTE_ADDR'];
        $q = [
            'secret' => $secret,
            'response' => $response,
            'remoteip' => $remoteip
        ];
        $response = file_get_contents($url .'?' . http_build_query($q));
        return json_decode($response, true);
    }

}